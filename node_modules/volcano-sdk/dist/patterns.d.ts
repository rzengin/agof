import type { StepResult, AgentBuilder } from "./volcano-sdk.js";
export declare function executeParallel(stepsOrDict: any[] | Record<string, any>, executeStep: (step: any) => Promise<StepResult>): Promise<StepResult>;
export declare function executeBranch(condition: (history: StepResult[]) => boolean, branches: {
    true: (agent: AgentBuilder) => AgentBuilder;
    false: (agent: AgentBuilder) => AgentBuilder;
}, history: StepResult[], createSubAgent: () => AgentBuilder): Promise<StepResult[]>;
export declare function executeSwitch<T>(selector: (history: StepResult[]) => T, cases: Record<string, (agent: AgentBuilder) => AgentBuilder> & {
    default?: (agent: AgentBuilder) => AgentBuilder;
}, history: StepResult[], createSubAgent: () => AgentBuilder): Promise<StepResult[]>;
export declare function executeWhile(condition: (history: StepResult[]) => boolean, body: (agent: AgentBuilder) => AgentBuilder, history: StepResult[], createSubAgent: () => AgentBuilder, opts?: {
    maxIterations?: number;
    timeout?: number;
}): Promise<StepResult[]>;
export declare function executeForEach<T>(items: T[], body: (item: T, agent: AgentBuilder) => AgentBuilder, createSubAgent: () => AgentBuilder): Promise<StepResult[]>;
export declare function executeRetryUntil(body: (agent: AgentBuilder) => AgentBuilder, successCondition: (result: StepResult) => boolean, createSubAgent: () => AgentBuilder, opts?: {
    maxAttempts?: number;
    backoff?: number;
}): Promise<StepResult[]>;
export declare function executeRunAgent(subAgent: AgentBuilder, parentStepIndex?: number, parentTotalSteps?: number): Promise<StepResult[]>;
