// OpenTelemetry integration for Volcano SDK
// Opt-in observability with traces and metrics
import { createRequire } from 'node:module';
let otelApi = null;
let hasOtelWarned = false;
function tryLoadOtel() {
    if (otelApi)
        return otelApi;
    try {
        // Dynamic import to avoid hard dependency
        // Use createRequire for ES module compatibility
        const require = createRequire(import.meta.url);
        otelApi = require('@opentelemetry/api');
        return otelApi;
    }
    catch {
        if (!hasOtelWarned) {
            console.warn('[Volcano] OpenTelemetry API not found. Install with: npm install @opentelemetry/api');
            hasOtelWarned = true;
        }
        return null;
    }
}
export function createVolcanoTelemetry(config = {}) {
    const otel = tryLoadOtel();
    if (!otel) {
        // Return no-op telemetry if OTEL not available
        return {
            startAgentSpan: () => null,
            startStepSpan: () => null,
            startLLMSpan: () => null,
            startMCPSpan: () => null,
            endSpan: () => { },
            recordMetric: () => { }
        };
    }
    const serviceName = config.serviceName || 'volcano-sdk';
    const enableTraces = config.traces !== false; // enabled by default
    const enableMetrics = config.metrics !== false;
    // Get or create tracer
    const tracer = config.tracer || (enableTraces ? otel.trace.getTracer(serviceName, '0.1.0') : null);
    // Get or create meter
    const meter = config.meter || (enableMetrics ? otel.metrics.getMeter(serviceName, '0.1.0') : null);
    // Create metrics
    let agentDurationHistogram = null;
    let stepDurationHistogram = null;
    let llmCallsCounter = null;
    let mcpCallsCounter = null;
    let agentCallsCounter = null;
    let agentDelegationHistogram = null;
    let errorsCounter = null;
    if (meter) {
        try {
            agentDurationHistogram = meter.createHistogram('volcano.agent.duration', {
                description: 'Agent workflow duration',
                unit: 'ms'
            });
            stepDurationHistogram = meter.createHistogram('volcano.step.duration', {
                description: 'Individual step duration',
                unit: 'ms'
            });
            llmCallsCounter = meter.createCounter('volcano.llm.calls.total', {
                description: 'Total LLM API calls',
                unit: 'calls'
            });
            mcpCallsCounter = meter.createCounter('volcano.mcp.calls.total', {
                description: 'Total MCP tool calls',
                unit: 'calls'
            });
            agentCallsCounter = meter.createCounter('volcano.agent.calls.total', {
                description: 'Total sub-agent delegations',
                unit: 'calls'
            });
            agentDelegationHistogram = meter.createHistogram('volcano.agent.delegation.count', {
                description: 'Number of agents delegated to per step',
                unit: 'agents'
            });
            errorsCounter = meter.createCounter('volcano.errors.total', {
                description: 'Total errors by type',
                unit: 'errors'
            });
        }
        catch (e) {
            console.warn('[Volcano] Failed to create metrics:', e);
        }
    }
    return {
        startAgentSpan(stepCount) {
            if (!tracer)
                return null;
            try {
                return tracer.startSpan('agent.run', {
                    attributes: {
                        'agent.step_count': stepCount,
                        'volcano.version': '0.1.0'
                    }
                });
            }
            catch (e) {
                console.warn('[Volcano] Failed to start agent span:', e);
                return null;
            }
        },
        startStepSpan(parent, stepIndex, stepType) {
            if (!tracer)
                return null;
            try {
                const ctx = parent ? otel.trace.setSpan(otel.context.active(), parent) : undefined;
                return tracer.startSpan('step.execute', {
                    attributes: {
                        'step.index': stepIndex,
                        'step.type': stepType
                    }
                }, ctx);
            }
            catch (e) {
                console.warn('[Volcano] Failed to start step span:', e);
                return null;
            }
        },
        startLLMSpan(parent, llm, prompt) {
            if (!tracer)
                return null;
            try {
                const ctx = parent ? otel.trace.setSpan(otel.context.active(), parent) : undefined;
                return tracer.startSpan('llm.generate', {
                    attributes: {
                        'llm.provider': llm.id || 'unknown',
                        'llm.model': llm.model,
                        'llm.prompt_length': prompt.length
                    }
                }, ctx);
            }
            catch (e) {
                console.warn('[Volcano] Failed to start LLM span:', e);
                return null;
            }
        },
        startMCPSpan(parent, mcp, operation) {
            if (!tracer)
                return null;
            try {
                const ctx = parent ? otel.trace.setSpan(otel.context.active(), parent) : undefined;
                return tracer.startSpan(`mcp.${operation}`, {
                    attributes: {
                        'mcp.endpoint': mcp.url,
                        'mcp.operation': operation,
                        'mcp.has_auth': !!mcp.auth
                    }
                }, ctx);
            }
            catch (e) {
                console.warn('[Volcano] Failed to start MCP span:', e);
                return null;
            }
        },
        endSpan(span, result, error) {
            if (!span)
                return;
            try {
                if (error) {
                    span.setStatus({
                        code: otel.SpanStatusCode.ERROR,
                        message: error.message
                    });
                    span.recordException(error);
                }
                else {
                    span.setStatus({ code: otel.SpanStatusCode.OK });
                    // Add result attributes
                    if (result) {
                        if (result.durationMs)
                            span.setAttribute('duration_ms', result.durationMs);
                        if (result.llmMs)
                            span.setAttribute('llm.duration_ms', result.llmMs);
                        if (result.toolCalls)
                            span.setAttribute('mcp.tool_count', result.toolCalls.length);
                    }
                }
                span.end();
            }
            catch (e) {
                console.warn('[Volcano] Failed to end span:', e);
            }
        },
        recordMetric(name, value, attributes = {}) {
            try {
                if (name === 'agent.duration' && agentDurationHistogram) {
                    agentDurationHistogram.record(value, attributes);
                }
                else if (name === 'step.duration' && stepDurationHistogram) {
                    stepDurationHistogram.record(value, attributes);
                }
                else if (name === 'llm.call' && llmCallsCounter) {
                    llmCallsCounter.add(1, attributes);
                }
                else if (name === 'mcp.call' && mcpCallsCounter) {
                    mcpCallsCounter.add(1, attributes);
                }
                else if (name === 'agent.call' && agentCallsCounter) {
                    agentCallsCounter.add(value, attributes);
                }
                else if (name === 'agent.delegation' && agentDelegationHistogram) {
                    agentDelegationHistogram.record(value, attributes);
                }
                else if (name === 'error' && errorsCounter) {
                    errorsCounter.add(1, attributes);
                }
            }
            catch (e) {
                console.warn('[Volcano] Failed to record metric:', e);
            }
        }
    };
}
// No-op telemetry (when not configured)
export const noopTelemetry = {
    startAgentSpan: () => null,
    startStepSpan: () => null,
    startLLMSpan: () => null,
    startMCPSpan: () => null,
    endSpan: () => { },
    recordMetric: () => { }
};
