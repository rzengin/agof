import { sanitizeToolName } from "./utils.js";
export function llmVertexStudio(cfg) {
    if (!cfg.model) {
        throw new Error("llmVertexStudio: Missing required 'model' parameter. " +
            "Please specify a Gemini model (e.g., 'gemini-2.0-flash-lite'). " +
            "Example: llmVertexStudio({ model: 'gemini-2.0-flash-lite', apiKey: 'your-api-key' })");
    }
    if (!cfg.apiKey && !cfg.client) {
        throw new Error("llmVertexStudio: Missing required 'apiKey' parameter. " +
            "Please provide a Google AI Studio API key. " +
            "Example: llmVertexStudio({ model: 'gemini-2.0-flash-lite', apiKey: 'your-api-key' })");
    }
    const model = cfg.model;
    const baseURL = (cfg.baseURL || "https://aiplatform.googleapis.com/v1").replace(/\/$/, "");
    const options = cfg.options || {};
    let client = cfg.client;
    if (!client) {
        client = {
            generateContent: async (params) => {
                const endpoint = `${baseURL}/publishers/google/models/${model}:generateContent?key=${cfg.apiKey}`;
                const response = await fetch(endpoint, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(params),
                });
                if (!response.ok) {
                    const text = await response.text();
                    const err = new Error(`Vertex Studio HTTP ${response.status}`);
                    err.status = response.status;
                    err.body = text;
                    throw err;
                }
                return await response.json();
            },
        };
    }
    return {
        id: `VertexStudio-${model}`,
        model,
        client,
        async gen(prompt) {
            const generationConfig = {
                maxOutputTokens: options.max_output_tokens || 256,
                ...(options.temperature !== undefined && { temperature: options.temperature }),
                ...(options.top_p !== undefined && { topP: options.top_p }),
                ...(options.top_k !== undefined && { topK: options.top_k }),
                ...(options.stop_sequences && { stopSequences: options.stop_sequences }),
                ...(options.candidate_count !== undefined && { candidateCount: options.candidate_count }),
                ...(options.response_mime_type && { responseMimeType: options.response_mime_type }),
            };
            const params = {
                contents: [
                    {
                        role: "user",
                        parts: [{ text: prompt }]
                    }
                ],
                generationConfig,
            };
            const resp = await client.generateContent(params);
            const candidates = resp?.candidates || [];
            const content = candidates[0]?.content?.parts || [];
            const text = content.find((part) => part?.text)?.text || "";
            return typeof text === "string" ? text : JSON.stringify(text);
        },
        async genWithTools(prompt, tools) {
            const nameMap = new Map();
            const formattedTools = tools.map((tool) => {
                const dottedName = tool.name;
                const sanitized = sanitizeToolName(dottedName);
                nameMap.set(sanitized, { dottedName, def: tool });
                // Clean the parameters to remove any $schema or other unsupported fields
                const cleanParams = { ...tool.parameters };
                delete cleanParams.$schema;
                delete cleanParams.$id;
                delete cleanParams.$ref;
                return {
                    functionDeclarations: [{
                            name: sanitized,
                            description: tool.description,
                            parameters: cleanParams,
                        }]
                };
            });
            const generationConfig = {
                maxOutputTokens: options.max_output_tokens || 256,
                ...(options.temperature !== undefined && { temperature: options.temperature }),
                ...(options.top_p !== undefined && { topP: options.top_p }),
                ...(options.top_k !== undefined && { topK: options.top_k }),
                ...(options.stop_sequences && { stopSequences: options.stop_sequences }),
                ...(options.candidate_count !== undefined && { candidateCount: options.candidate_count }),
                ...(options.response_mime_type && { responseMimeType: options.response_mime_type }),
            };
            const params = {
                contents: [
                    {
                        role: "user",
                        parts: [{ text: prompt }]
                    }
                ],
                tools: formattedTools,
                generationConfig,
            };
            const resp = await client.generateContent(params);
            const candidates = resp?.candidates || [];
            const content = candidates[0]?.content?.parts || [];
            const toolCalls = [];
            let textContent = "";
            for (const part of content) {
                if (part?.functionCall) {
                    const functionCall = part.functionCall;
                    const sanitizedName = functionCall.name || "";
                    const mapped = nameMap.get(sanitizedName);
                    toolCalls.push({
                        name: mapped?.dottedName ?? sanitizedName,
                        arguments: functionCall.args || {},
                        mcpHandle: mapped?.def.mcpHandle,
                    });
                }
                else if (part?.text) {
                    textContent += part.text;
                }
            }
            return {
                content: textContent || undefined,
                toolCalls,
            };
        },
        async *genStream(prompt) {
            // Use Google's streaming endpoint
            const endpoint = `${baseURL}/publishers/google/models/${model}:streamGenerateContent?key=${cfg.apiKey}`;
            const generationConfig = {
                maxOutputTokens: options.max_output_tokens || 256,
                ...(options.temperature !== undefined && { temperature: options.temperature }),
                ...(options.top_p !== undefined && { topP: options.top_p }),
                ...(options.top_k !== undefined && { topK: options.top_k }),
                ...(options.stop_sequences && { stopSequences: options.stop_sequences }),
                ...(options.candidate_count !== undefined && { candidateCount: options.candidate_count }),
                ...(options.response_mime_type && { responseMimeType: options.response_mime_type }),
            };
            const params = {
                contents: [
                    {
                        role: "user",
                        parts: [{ text: prompt }]
                    }
                ],
                generationConfig,
            };
            const response = await fetch(endpoint, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(params),
            });
            if (!response.ok) {
                throw new Error(`Vertex Studio streaming failed: ${response.status}`);
            }
            // Google streams as array of JSON objects with incremental parsing
            if (response.body) {
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let buffer = '';
                try {
                    while (true) {
                        const { done, value } = await reader.read();
                        if (done)
                            break;
                        buffer += decoder.decode(value, { stream: true });
                        // Try to extract complete JSON objects from buffer
                        while (true) {
                            // Find the start of a JSON object
                            const startIdx = buffer.indexOf('{');
                            if (startIdx === -1)
                                break;
                            // Find the matching closing brace
                            let braceCount = 0;
                            let inString = false;
                            let escapeNext = false;
                            let endIdx = -1;
                            for (let i = startIdx; i < buffer.length; i++) {
                                const char = buffer[i];
                                if (!inString) {
                                    if (char === '{')
                                        braceCount++;
                                    else if (char === '}') {
                                        braceCount--;
                                        if (braceCount === 0) {
                                            endIdx = i;
                                            break;
                                        }
                                    }
                                    else if (char === '"')
                                        inString = true;
                                }
                                else {
                                    if (escapeNext) {
                                        escapeNext = false;
                                    }
                                    else if (char === '\\') {
                                        escapeNext = true;
                                    }
                                    else if (char === '"') {
                                        inString = false;
                                    }
                                }
                            }
                            if (endIdx === -1)
                                break; // Incomplete JSON object
                            // Extract complete JSON object
                            const jsonStr = buffer.slice(startIdx, endIdx + 1);
                            buffer = buffer.slice(endIdx + 1);
                            try {
                                const parsed = JSON.parse(jsonStr);
                                const candidates = parsed?.candidates || [];
                                const parts = candidates[0]?.content?.parts || [];
                                const text = parts.find((p) => p?.text)?.text;
                                if (typeof text === 'string' && text.length > 0) {
                                    yield text;
                                }
                            }
                            catch {
                                continue;
                            }
                        }
                    }
                }
                finally {
                    reader.releaseLock();
                }
                return;
            }
            // If no body, something went wrong
            throw new Error('No response body received from Vertex Studio streaming endpoint');
        },
    };
}
