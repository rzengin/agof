import type { ToolDefinition, LLMToolResult } from "./types.js";
/**
 * Sanitize tool names to only include alphanumeric characters, underscores, and hyphens.
 * This ensures compatibility across different LLM providers.
 */
export declare function sanitizeToolName(name: string): string;
/**
 * Safely parse JSON arguments from tool calls.
 * Returns an empty object if parsing fails.
 */
export declare function parseToolArguments(argsJson: string): Record<string, any>;
/**
 * Type definitions for OpenAI-compatible tool call responses
 */
export interface OpenAICompatibleToolCall {
    function?: {
        name: string;
        arguments: string;
    };
    name?: string;
    arguments?: string;
}
export interface OpenAICompatibleMessage {
    content?: string | null;
    tool_calls?: OpenAICompatibleToolCall[];
}
/**
 * Create tool mapping for OpenAI-compatible providers.
 * Handles name sanitization and creates a reverse lookup map.
 */
export declare function createOpenAICompatibleTools(tools: ToolDefinition[]): {
    nameMap: Map<string, {
        dottedName: string;
        def: ToolDefinition;
    }>;
    formattedTools: {
        type: "function";
        function: {
            name: string;
            description: string;
            parameters: Record<string, any>;
        };
    }[];
};
/**
 * Parse OpenAI-compatible tool call response into LLMToolResult format.
 */
export declare function parseOpenAICompatibleResponse(message: any, nameMap: Map<string, {
    dottedName: string;
    def: ToolDefinition;
}>): LLMToolResult;
